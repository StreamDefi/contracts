/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStableWrapper {
  export type WithdrawalReceiptStruct = {
    amount: BigNumberish;
    epoch: BigNumberish;
  };

  export type WithdrawalReceiptStructOutput = [
    amount: bigint,
    epoch: bigint
  ] & { amount: bigint; epoch: bigint };
}

export interface IStableWrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "advanceEpoch"
      | "allowIndependence"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "completeWithdrawal"
      | "currentEpoch"
      | "deposit"
      | "depositToVault"
      | "initiateWithdrawal"
      | "initiateWithdrawalFromVault"
      | "permissionedBurn"
      | "permissionedMint"
      | "setAllowIndependence"
      | "setAsset"
      | "setKeeper"
      | "totalSupply"
      | "transfer"
      | "transferAsset"
      | "transferFrom"
      | "withdrawalReceipts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowIndependenceSet"
      | "AssetTransferred"
      | "Deposit"
      | "DepositToVault"
      | "EpochAdvanced"
      | "KeeperSet"
      | "PermissionedBurn"
      | "PermissionedMint"
      | "WithdrawalInitiated"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowIndependence",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdrawal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdrawalFromVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionedBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionedMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowIndependence",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAsset",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalReceipts",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowIndependence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdrawalFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionedBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionedMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowIndependence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalReceipts",
    data: BytesLike
  ): Result;
}

export namespace AllowIndependenceSetEvent {
  export type InputTuple = [allowIndependence: boolean];
  export type OutputTuple = [allowIndependence: boolean];
  export interface OutputObject {
    allowIndependence: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetTransferredEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositToVaultEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochAdvancedEvent {
  export type InputTuple = [newEpoch: BigNumberish];
  export type OutputTuple = [newEpoch: bigint];
  export interface OutputObject {
    newEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperSetEvent {
  export type InputTuple = [keeper: AddressLike];
  export type OutputTuple = [keeper: string];
  export interface OutputObject {
    keeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionedBurnEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionedMintEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalInitiatedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    epoch: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, epoch: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStableWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): IStableWrapper;
  waitForDeployment(): Promise<this>;

  interface: IStableWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  advanceEpoch: TypedContractMethod<[], [void], "nonpayable">;

  allowIndependence: TypedContractMethod<[], [boolean], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  completeWithdrawal: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositToVault: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initiateWithdrawal: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initiateWithdrawalFromVault: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  permissionedBurn: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  permissionedMint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAllowIndependence: TypedContractMethod<
    [_allowIndependence: boolean],
    [void],
    "nonpayable"
  >;

  setAsset: TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;

  setKeeper: TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferAsset: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdrawalReceipts: TypedContractMethod<
    [user: AddressLike],
    [IStableWrapper.WithdrawalReceiptStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "advanceEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowIndependence"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeWithdrawal"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToVault"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateWithdrawal"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initiateWithdrawalFromVault"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permissionedBurn"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permissionedMint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowIndependence"
  ): TypedContractMethod<[_allowIndependence: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAsset"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKeeper"
  ): TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferAsset"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalReceipts"
  ): TypedContractMethod<
    [user: AddressLike],
    [IStableWrapper.WithdrawalReceiptStructOutput],
    "view"
  >;

  getEvent(
    key: "AllowIndependenceSet"
  ): TypedContractEvent<
    AllowIndependenceSetEvent.InputTuple,
    AllowIndependenceSetEvent.OutputTuple,
    AllowIndependenceSetEvent.OutputObject
  >;
  getEvent(
    key: "AssetTransferred"
  ): TypedContractEvent<
    AssetTransferredEvent.InputTuple,
    AssetTransferredEvent.OutputTuple,
    AssetTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositToVault"
  ): TypedContractEvent<
    DepositToVaultEvent.InputTuple,
    DepositToVaultEvent.OutputTuple,
    DepositToVaultEvent.OutputObject
  >;
  getEvent(
    key: "EpochAdvanced"
  ): TypedContractEvent<
    EpochAdvancedEvent.InputTuple,
    EpochAdvancedEvent.OutputTuple,
    EpochAdvancedEvent.OutputObject
  >;
  getEvent(
    key: "KeeperSet"
  ): TypedContractEvent<
    KeeperSetEvent.InputTuple,
    KeeperSetEvent.OutputTuple,
    KeeperSetEvent.OutputObject
  >;
  getEvent(
    key: "PermissionedBurn"
  ): TypedContractEvent<
    PermissionedBurnEvent.InputTuple,
    PermissionedBurnEvent.OutputTuple,
    PermissionedBurnEvent.OutputObject
  >;
  getEvent(
    key: "PermissionedMint"
  ): TypedContractEvent<
    PermissionedMintEvent.InputTuple,
    PermissionedMintEvent.OutputTuple,
    PermissionedMintEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalInitiated"
  ): TypedContractEvent<
    WithdrawalInitiatedEvent.InputTuple,
    WithdrawalInitiatedEvent.OutputTuple,
    WithdrawalInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AllowIndependenceSet(bool)": TypedContractEvent<
      AllowIndependenceSetEvent.InputTuple,
      AllowIndependenceSetEvent.OutputTuple,
      AllowIndependenceSetEvent.OutputObject
    >;
    AllowIndependenceSet: TypedContractEvent<
      AllowIndependenceSetEvent.InputTuple,
      AllowIndependenceSetEvent.OutputTuple,
      AllowIndependenceSetEvent.OutputObject
    >;

    "AssetTransferred(address,uint256)": TypedContractEvent<
      AssetTransferredEvent.InputTuple,
      AssetTransferredEvent.OutputTuple,
      AssetTransferredEvent.OutputObject
    >;
    AssetTransferred: TypedContractEvent<
      AssetTransferredEvent.InputTuple,
      AssetTransferredEvent.OutputTuple,
      AssetTransferredEvent.OutputObject
    >;

    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositToVault(address,uint256)": TypedContractEvent<
      DepositToVaultEvent.InputTuple,
      DepositToVaultEvent.OutputTuple,
      DepositToVaultEvent.OutputObject
    >;
    DepositToVault: TypedContractEvent<
      DepositToVaultEvent.InputTuple,
      DepositToVaultEvent.OutputTuple,
      DepositToVaultEvent.OutputObject
    >;

    "EpochAdvanced(uint32)": TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;
    EpochAdvanced: TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;

    "KeeperSet(address)": TypedContractEvent<
      KeeperSetEvent.InputTuple,
      KeeperSetEvent.OutputTuple,
      KeeperSetEvent.OutputObject
    >;
    KeeperSet: TypedContractEvent<
      KeeperSetEvent.InputTuple,
      KeeperSetEvent.OutputTuple,
      KeeperSetEvent.OutputObject
    >;

    "PermissionedBurn(address,uint256)": TypedContractEvent<
      PermissionedBurnEvent.InputTuple,
      PermissionedBurnEvent.OutputTuple,
      PermissionedBurnEvent.OutputObject
    >;
    PermissionedBurn: TypedContractEvent<
      PermissionedBurnEvent.InputTuple,
      PermissionedBurnEvent.OutputTuple,
      PermissionedBurnEvent.OutputObject
    >;

    "PermissionedMint(address,uint256)": TypedContractEvent<
      PermissionedMintEvent.InputTuple,
      PermissionedMintEvent.OutputTuple,
      PermissionedMintEvent.OutputObject
    >;
    PermissionedMint: TypedContractEvent<
      PermissionedMintEvent.InputTuple,
      PermissionedMintEvent.OutputTuple,
      PermissionedMintEvent.OutputObject
    >;

    "WithdrawalInitiated(address,uint224,uint32)": TypedContractEvent<
      WithdrawalInitiatedEvent.InputTuple,
      WithdrawalInitiatedEvent.OutputTuple,
      WithdrawalInitiatedEvent.OutputObject
    >;
    WithdrawalInitiated: TypedContractEvent<
      WithdrawalInitiatedEvent.InputTuple,
      WithdrawalInitiatedEvent.OutputTuple,
      WithdrawalInitiatedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
