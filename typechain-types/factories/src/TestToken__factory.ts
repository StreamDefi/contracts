/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TestToken, TestTokenInterface } from "../../src/TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000ad338038062000ad383398101604081905262000034916200012d565b8282600362000044838262000243565b50600462000053828262000243565b50505060ff16608052506200030f9050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008d57600080fd5b81516001600160401b0380821115620000aa57620000aa62000065565b604051601f8301601f19908116603f01168101908282118183101715620000d557620000d562000065565b8160405283815260209250866020858801011115620000f357600080fd5b600091505b83821015620001175785820183015181830184015290820190620000f8565b6000602085830101528094505050505092915050565b6000806000606084860312156200014357600080fd5b83516001600160401b03808211156200015b57600080fd5b62000169878388016200007b565b945060208601519150808211156200018057600080fd5b506200018f868287016200007b565b925050604084015160ff81168114620001a757600080fd5b809150509250925092565b600181811c90821680620001c757607f821691505b602082108103620001e857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023e576000816000526020600020601f850160051c81016020861015620002195750805b601f850160051c820191505b818110156200023a5782815560010162000225565b5050505b505050565b81516001600160401b038111156200025f576200025f62000065565b6200027781620002708454620001b2565b84620001ee565b602080601f831160018114620002af5760008415620002965750858301515b600019600386901b1c1916600185901b1785556200023a565b600085815260208120601f198616915b82811015620002e057888601518255948401946001909101908401620002bf565b5085821015620002ff5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516107a86200032b600039600061011001526107a86000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461013a57806370a082311461014f57806395d89b4114610178578063a9059cbb14610180578063dd62ed3e1461019357600080fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6578063313ce56714610109575b600080fd5b6100ab6101cc565b6040516100b891906105f1565b60405180910390f35b6100d46100cf36600461065c565b61025e565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d4610104366004610686565b610278565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100b8565b61014d61014836600461065c565b61029c565b005b6100e861015d3660046106c2565b6001600160a01b031660009081526020819052604090205490565b6100ab6102aa565b6100d461018e36600461065c565b6102b9565b6100e86101a13660046106e4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101db90610717565b80601f016020809104026020016040519081016040528092919081815260200182805461020790610717565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b5050505050905090565b60003361026c8185856102c7565b60019150505b92915050565b6000336102868582856102d9565b61029185858561035d565b506001949350505050565b6102a682826103bc565b5050565b6060600480546101db90610717565b60003361026c81858561035d565b6102d483838360016103f2565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610357578181101561034857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b610357848484840360006103f2565b50505050565b6001600160a01b03831661038757604051634b637e8f60e11b81526000600482015260240161033f565b6001600160a01b0382166103b15760405163ec442f0560e01b81526000600482015260240161033f565b6102d48383836104c7565b6001600160a01b0382166103e65760405163ec442f0560e01b81526000600482015260240161033f565b6102a6600083836104c7565b6001600160a01b03841661041c5760405163e602df0560e01b81526000600482015260240161033f565b6001600160a01b03831661044657604051634a1406b160e11b81526000600482015260240161033f565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561035757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104b991815260200190565b60405180910390a350505050565b6001600160a01b0383166104f25780600260008282546104e79190610751565b909155506105649050565b6001600160a01b038316600090815260208190526040902054818110156105455760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161033f565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166105805760028054829003905561059f565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105e491815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b8181101561061f57858101830151858201604001528201610603565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461065757600080fd5b919050565b6000806040838503121561066f57600080fd5b61067883610640565b946020939093013593505050565b60008060006060848603121561069b57600080fd5b6106a484610640565b92506106b260208501610640565b9150604084013590509250925092565b6000602082840312156106d457600080fd5b6106dd82610640565b9392505050565b600080604083850312156106f757600080fd5b61070083610640565b915061070e60208401610640565b90509250929050565b600181811c9082168061072b57607f821691505b60208210810361074b57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561027257634e487b7160e01b600052601160045260246000fdfea26469706673582212204a53204a42646af642f280563270baf95a99709ff06e8b2340dfc3893bc59e2064736f6c63430008160033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, decimals_, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, decimals_, overrides || {}) as Promise<
      TestToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestToken__factory {
    return super.connect(runner) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestToken {
    return new Contract(address, _abi, runner) as unknown as TestToken;
  }
}
