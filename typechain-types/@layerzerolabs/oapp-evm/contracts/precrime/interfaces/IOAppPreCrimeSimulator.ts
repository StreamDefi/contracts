/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export type InboundPacketStruct = {
  origin: OriginStruct;
  dstEid: BigNumberish;
  receiver: AddressLike;
  guid: BytesLike;
  value: BigNumberish;
  executor: AddressLike;
  message: BytesLike;
  extraData: BytesLike;
};

export type InboundPacketStructOutput = [
  origin: OriginStructOutput,
  dstEid: bigint,
  receiver: string,
  guid: string,
  value: bigint,
  executor: string,
  message: string,
  extraData: string
] & {
  origin: OriginStructOutput;
  dstEid: bigint;
  receiver: string;
  guid: string;
  value: bigint;
  executor: string;
  message: string;
  extraData: string;
};

export interface IOAppPreCrimeSimulatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isPeer"
      | "lzReceiveAndRevert"
      | "oApp"
      | "preCrime"
      | "setPreCrime"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "isPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveAndRevert",
    values: [InboundPacketStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
  encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPreCrime",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPreCrime",
    data: BytesLike
  ): Result;
}

export namespace PreCrimeSetEvent {
  export type InputTuple = [preCrimeAddress: AddressLike];
  export type OutputTuple = [preCrimeAddress: string];
  export interface OutputObject {
    preCrimeAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOAppPreCrimeSimulator extends BaseContract {
  connect(runner?: ContractRunner | null): IOAppPreCrimeSimulator;
  waitForDeployment(): Promise<this>;

  interface: IOAppPreCrimeSimulatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [boolean],
    "view"
  >;

  lzReceiveAndRevert: TypedContractMethod<
    [_packets: InboundPacketStruct[]],
    [void],
    "payable"
  >;

  oApp: TypedContractMethod<[], [string], "view">;

  preCrime: TypedContractMethod<[], [string], "view">;

  setPreCrime: TypedContractMethod<
    [_preCrime: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzReceiveAndRevert"
  ): TypedContractMethod<[_packets: InboundPacketStruct[]], [void], "payable">;
  getFunction(
    nameOrSignature: "oApp"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "preCrime"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPreCrime"
  ): TypedContractMethod<[_preCrime: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "PreCrimeSet"
  ): TypedContractEvent<
    PreCrimeSetEvent.InputTuple,
    PreCrimeSetEvent.OutputTuple,
    PreCrimeSetEvent.OutputObject
  >;

  filters: {
    "PreCrimeSet(address)": TypedContractEvent<
      PreCrimeSetEvent.InputTuple,
      PreCrimeSetEvent.OutputTuple,
      PreCrimeSetEvent.OutputObject
    >;
    PreCrimeSet: TypedContractEvent<
      PreCrimeSetEvent.InputTuple,
      PreCrimeSetEvent.OutputTuple,
      PreCrimeSetEvent.OutputObject
    >;
  };
}
