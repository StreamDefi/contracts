/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IPreCrimeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buildSimulationResult"
      | "getConfig"
      | "preCrime"
      | "simulate"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildSimulationResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "preCrime",
    values: [BytesLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "buildSimulationResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface IPreCrime extends BaseContract {
  connect(runner?: ContractRunner | null): IPreCrime;
  waitForDeployment(): Promise<this>;

  interface: IPreCrimeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buildSimulationResult: TypedContractMethod<[], [string], "view">;

  getConfig: TypedContractMethod<
    [_packets: BytesLike[], _packetMsgValues: BigNumberish[]],
    [string],
    "nonpayable"
  >;

  preCrime: TypedContractMethod<
    [
      _packets: BytesLike[],
      _packetMsgValues: BigNumberish[],
      _simulations: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  simulate: TypedContractMethod<
    [_packets: BytesLike[], _packetMsgValues: BigNumberish[]],
    [string],
    "payable"
  >;

  version: TypedContractMethod<
    [],
    [[bigint, bigint] & { major: bigint; minor: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buildSimulationResult"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [_packets: BytesLike[], _packetMsgValues: BigNumberish[]],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preCrime"
  ): TypedContractMethod<
    [
      _packets: BytesLike[],
      _packetMsgValues: BigNumberish[],
      _simulations: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "simulate"
  ): TypedContractMethod<
    [_packets: BytesLike[], _packetMsgValues: BigNumberish[]],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { major: bigint; minor: bigint }],
    "view"
  >;

  filters: {};
}
