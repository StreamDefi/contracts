/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type SetConfigParamStruct = {
  eid: BigNumberish;
  configType: BigNumberish;
  config: BytesLike;
};

export type SetConfigParamStructOutput = [
  eid: bigint,
  configType: bigint,
  config: string
] & { eid: bigint; configType: bigint; config: string };

export interface IMessageLibInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getConfig"
      | "isSupportedEid"
      | "messageLibType"
      | "setConfig"
      | "supportsInterface"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedEid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageLibType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [AddressLike, SetConfigParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedEid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageLibType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface IMessageLib extends BaseContract {
  connect(runner?: ContractRunner | null): IMessageLib;
  waitForDeployment(): Promise<this>;

  interface: IMessageLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConfig: TypedContractMethod<
    [_eid: BigNumberish, _oapp: AddressLike, _configType: BigNumberish],
    [string],
    "view"
  >;

  isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;

  messageLibType: TypedContractMethod<[], [bigint], "view">;

  setConfig: TypedContractMethod<
    [_oapp: AddressLike, _config: SetConfigParamStruct[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        major: bigint;
        minor: bigint;
        endpointVersion: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [_eid: BigNumberish, _oapp: AddressLike, _configType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupportedEid"
  ): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageLibType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [_oapp: AddressLike, _config: SetConfigParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        major: bigint;
        minor: bigint;
        endpointVersion: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
